package components

import (
	"github.com/henrriusdev/portfolio/pkg/model"
	"github.com/henrriusdev/portfolio/src/components/button"
	"github.com/henrriusdev/portfolio/src/components/checkbox"
	"github.com/henrriusdev/portfolio/src/components/form"
	"github.com/henrriusdev/portfolio/src/components/input"
	"github.com/henrriusdev/portfolio/src/components/modal"
	"github.com/henrriusdev/portfolio/src/components/selectbox"
	"github.com/henrriusdev/portfolio/src/components/textarea"
	"strconv"
)

func setSelected(projectTechs []model.Technology, techs []selectbox.Option) []selectbox.Option {
	var selectedTechs []selectbox.Option

	for _, tech := range techs {
		for _, projectTech := range projectTechs {
			id := strconv.FormatUint(uint64(projectTech.ID), 10)
			if tech.Value == id {
				tech.Selected = true
			}
		}

		selectedTechs = append(selectedTechs, tech)
	}

	return selectedTechs
}

templ ProjectModal(modalID string, techs []selectbox.Option, project model.Project) {
	@modal.Modal(modal.Props{ID: modalID, Class: "max-w-lg mx-auto"}) {
		@modal.Header() {
			<h3 class="text-xl font-bold">Edit Project</h3>
		}
		@modal.Body() {
			<form
				id={ "projectFormEdit-" + strconv.Itoa(int(project.ID)) }
				action="/dashboard/save-project"
				method="POST"
				class="space-y-4"
			>
				<input type="hidden" name="id" value={ strconv.Itoa(int(project.ID)) }/>
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectTitle"}) {
						Title
					}
					@input.Input(input.Props{
						ID:          "projectTitle",
						Name:        "title",
						Placeholder: "Enter project title",
						Value:       project.Title,
						Required:    true,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectDescription"}) {
						Description
					}
					@textarea.Textarea(textarea.Props{
						ID:          "projectDescription",
						Name:        "description",
						Placeholder: "Enter project description",
						Value:       project.Description,
						Required:    true,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectTechs"}) {
						Technologies
					}
					<div class="mt-2">
						@checkbox.CheckboxGroup(checkbox.GroupProps{
							ID:      "projectTechs",
							Name:    "techs", // El componente añadirá automáticamente [] al final
							Options: setSelected(project.Techs, techs),
							Class:   "max-h-60 overflow-y-auto",
						})
					</div>
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectImage"}) {
						Image URL
					}
					@input.Input(input.Props{
						ID:          "projectImage",
						Name:        "image_url",
						Placeholder: "Enter image URL",
						Value:       project.ImageURL,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectLive"}) {
						Live URL
					}
					@input.Input(input.Props{
						ID:          "projectLive",
						Name:        "url",
						Placeholder: "Enter live URL",
						Value:       project.URL,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "projectRepo"}) {
						Repo URL
					}
					@input.Input(input.Props{
						ID:          "projectRepo",
						Name:        "repo",
						Placeholder: "Enter repo URL",
						Value:       project.Repo,
					})
				}
			</form>
		}
		@modal.Footer() {
			<div class="flex gap-2">
				@modal.Close(modal.CloseProps{ID: modalID}) {
					@button.Button(button.Props{Variant: button.VariantDefault}) {
						Cancel
					}
				}
				@button.Button(button.Props{
					Variant:    button.VariantDefault,
					Type:       "submit",
					Attributes: templ.Attributes{"form": "projectFormEdit-" + strconv.Itoa(int(project.ID))},
				}) {
					Edit
				}
			</div>
		}
	}
}
