package components

import (
	"github.com/henrriusdev/portfolio/pkg/model"
  "strconv"
)

// ✅ Ensures script loads only once
var projectFormHandle = templ.NewOnceHandle()

func isEdit(isEditing bool) string {
  if isEditing {
    return "Update"
  }

  return "Create"
}

func setSelected(projectTechs []model.Technology, techs []SelectOption) []SelectOption {
  var selectedTechs []SelectOption

  for _, tech := range techs {
    for _, projectTech := range projectTechs {
      id := strconv.FormatUint(uint64(projectTech.ID), 10)
      if tech.Value == id {
        tech.Selected = true
      }
    }

    selectedTechs = append(selectedTechs, tech)
  }

  return selectedTechs
} 

templ ProjectFormScript() {
	@projectFormHandle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener("alpine:init", () => {
				Alpine.data("projectFormData", (initialProject = null, availableTechs = []) => {
          console.log(initialProject)
          return {
					project: initialProject || {
						id: "",
						title: "",
						description: "",
						image_url: "",
						url: "",
						repo: "",
						techs: []
					},
					availableTechs: availableTechs,

					formAction() {
						return "/dashboard/save-project";
					},

					setProject(data) {
						this.project = data;
					}
				}});
			});
		</script>
	}
}

templ ProjectModal(modalID string, techs []SelectOption, project model.Project) {
	{{
		isEditing := project.ID != 0

		// ✅ Prepare JSON Data
		projectDataJSON := parseTemplJsonString(project)
		techsJSON := parseTemplJsonString(techs)
	}}

	<!-- ✅ Modal Component -->
	@Modal(ModalProps{ID: modalID, Class: "max-w-lg mx-auto"}) {
		@ModalHeader() {
			<h3 class="text-xl font-bold">
				if isEditing {
          "Edit Project"
        } else {
          "Create Project"
        }
			</h3>
		}
		@ModalBody() {
			<form
				id="projectFormEdit"
				x-data={ `projectFormData(` + string(projectDataJSON) + `, ` + string(techsJSON) + `)` }
				x-bind:action="formAction()"
				method="POST"
				class="space-y-4"
			>
				<input type="hidden" name="id" x-model="project.ID">

				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectTitle", Text: "Title"})
					@Input(InputProps{
						ID:          "projectTitle",
						Name:        "title",
						Placeholder: "Enter project title",
						Attributes:  templ.Attributes{"x-model": "project.title"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectDescription", Text: "Description"})
					@Textarea(TextareaProps{
						ID:          "projectDescription",
						Name:        "description",
						Placeholder: "Enter project description",
						Attributes:  templ.Attributes{"x-model": "project.description"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectTechs", Text: "Technologies"})
					@Select(SelectProps{
						ID:          "projectTechs",
						Name:        "techs",
						Placeholder: "Select technologies",
						Options:     setSelected(project.Techs, techs), 
						Multiple:    true,
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectImage", Text: "Image URL"})
					@Input(InputProps{
						ID:          "projectImage",
						Name:        "image_url",
						Placeholder: "Enter image URL",
						Attributes:  templ.Attributes{"x-model": "project.imageUrls"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectLive", Text: "Live URL"})
					@Input(InputProps{
						ID:          "projectLive",
						Name:        "url",
						Placeholder: "Enter live URL",
						Attributes:  templ.Attributes{"x-model": "project.url"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "projectRepo", Text: "Repo URL"})
					@Input(InputProps{
						ID:          "projectRepo",
						Name:        "repo",
						Placeholder: "Enter repository URL",
						Attributes:  templ.Attributes{"x-model": "project.repo"},
					})
				}
			</form>
		}
		@ModalFooter() {
			<div class="flex gap-2">
				@ModalClose(modalID) {
					@Button(ButtonProps{Text: "Cancel", Variant: ButtonVariantDefault})
				}
				@Button(ButtonProps{
					Text: isEdit(isEditing),
					Variant:    ButtonVariantDefault,
					Type:       "submit",
					Attributes: templ.Attributes{"form": "projectFormEdit"},
				})
			</div>
		}
	}
}
