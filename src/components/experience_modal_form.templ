package components

import (
	"github.com/henrriusdev/portfolio/pkg/model"
	"github.com/henrriusdev/portfolio/src/components/button"
	"github.com/henrriusdev/portfolio/src/components/checkbox"
	"github.com/henrriusdev/portfolio/src/components/datepicker"
	"github.com/henrriusdev/portfolio/src/components/form"
	"github.com/henrriusdev/portfolio/src/components/input"
	"github.com/henrriusdev/portfolio/src/components/modal"
	"github.com/henrriusdev/portfolio/src/components/textarea"
	"strconv"
	"time"
)

func getEndDateValue(endDate *time.Time) time.Time {
	if endDate != nil {
		return *endDate
	}
	return time.Time{}
}

templ ExperienceFormScript() {
	<script nonce={ templ.GetNonce(ctx) }>
		document.addEventListener("DOMContentLoaded", function() {
			const currentCheckbox = document.getElementById("is_current");
			const endDateInput = document.getElementById("experienceEndDate");
			
			if (currentCheckbox && endDateInput) {
				currentCheckbox.addEventListener("change", function() {
					endDateInput.disabled = this.checked;
					if (this.checked) {
						// Limpiar el campo de fecha final cuando se marca como trabajo actual
						const hiddenEndDateInput = document.querySelector('input[name="end_date"]');
						if (hiddenEndDateInput) {
							hiddenEndDateInput.value = "";
						}
					}
				});
				
				// Inicializar el estado del campo de fecha final
				endDateInput.disabled = currentCheckbox.checked;
			}
		});
	</script>
}

templ ExperienceModal(modalID string, experience model.Experience) {
	{{
		isEditing := experience.ID != 0
		formID := "experienceForm"
		if isEditing {
			formID = "experienceFormEdit-" + strconv.Itoa(int(experience.ID))
		}
	}}
	@modal.Modal(modal.Props{ID: modalID, Class: "max-w-lg mx-auto"}) {
		@modal.Header() {
			<h3 class="text-xl font-bold">
				if isEditing {
					Edit Experience
				} else {
					Create Experience
				}
			</h3>
		}
		@modal.Body() {
			<form
				id={ formID }
				action="/dashboard/save-work"
				method="POST"
				class="space-y-4"
			>
				<input type="hidden" name="id" value={ strconv.Itoa(int(experience.ID)) }/>
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "experienceStartDate"}) {
						Start Date
					}
					@datepicker.DatePicker(datepicker.Props{
						ID:         "experienceStartDate",
						Name:       "start_date",
						Value:      experience.StartDate,
						Required:   true,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "experienceEndDate"}) {
						End Date
					}
					@datepicker.DatePicker(datepicker.Props{
						ID:         "experienceEndDate",
						Name:       "end_date",
						Value:      getEndDateValue(experience.EndDate),
						Disabled:   experience.EndDate == nil,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.ItemFlex(form.ItemProps{}) {
						@checkbox.Checkbox(checkbox.Props{
							ID:         "is_current",
							Name:       "is_current",
							Value:      "true",
							Checked:    experience.EndDate == nil,
						})
						@form.Label(form.LabelProps{For: "is_current"}) {
							I currently work here
						}
					}
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "experienceRole"}) {
						Role
					}
					@input.Input(input.Props{
						ID:          "experienceRole",
						Name:        "role",
						Placeholder: "Enter role",
						Value:       experience.Role,
						Required:    true,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "experienceCompany"}) {
						Company
					}
					@input.Input(input.Props{
						ID:          "experienceCompany",
						Name:        "company",
						Placeholder: "Enter company name",
						Value:       experience.Company,
						Required:    true,
					})
				}
				@form.Item(form.ItemProps{Class: "mb-4"}) {
					@form.Label(form.LabelProps{For: "experienceDescription"}) {
						Description
					}
					@textarea.Textarea(textarea.Props{
						ID:          "experienceDescription",
						Name:        "description",
						Placeholder: "Enter description",
						Value:       experience.Description,
					})
				}
			</form>
		}
		@modal.Footer() {
			<div class="flex gap-2">
				@modal.Close(modal.CloseProps{ID: modalID}) {
					@button.Button(button.Props{Variant: button.VariantDefault}) {
						Cancel
					}
				}
				@button.Button(button.Props{
					Variant:    button.VariantDefault,
					Type:       "submit",
					Attributes: templ.Attributes{"form": formID},
				}) {
					if isEditing {
						Edit
					} else {
						Create
					}
				}
			</div>
		}
	}
}
