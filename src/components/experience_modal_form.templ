package components

import (
	"github.com/henrriusdev/portfolio/pkg/model"
	"time"
  "strconv"
)

func getEndDateValue(endDate *time.Time) time.Time {
	if endDate != nil {
		return *endDate
	}
	return time.Time{}
}

var experienceFormHandle = templ.NewOnceHandle()

templ ExperienceFormScript() {
	@experienceFormHandle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener("alpine:init", () => {
				Alpine.data("experienceFormData", (initialExperience = null) => {
					return {
						experience: initialExperience || {
							id: "",
							role: "",
							company: "",
							description: "",
							start_date: "",
							end_date: null,
							is_current: false
						},

						formAction() {
							return "/dashboard/save-work";
						},

						setExperience(data) {
							this.experience = data;
						},

						toggleEndDate() {
							if (this.experience.is_current) {
								this.experience.end_date = null;
							}
						}
					}
				});
			});
		</script>
	}
}

templ ExperienceModal(modalID string, experience model.Experience) {
	{{
		isEditing := experience.ID != 0
    formID := "experienceForm"
    if isEditing {
      formID = "experienceFormEdit-" + strconv.Itoa(int(experience.ID))
    }
      

		// Prepare JSON Data
		experienceDataJSON := parseTemplJsonString(experience)
	}}
	<!-- Modal Component -->
	@Modal(ModalProps{ID: modalID, Class: "max-w-lg mx-auto"}) {
		@ModalHeader() {
			<h3 class="text-xl font-bold">
				if isEditing {
					"Edit Experience"
				} else {
					"Create Experience"
				}
			</h3>
		}
		@ModalBody() {
			<form
				id={formID}
				x-data={ `experienceFormData(` + experienceDataJSON + `)` }
				x-bind:action="formAction()"
				method="POST"
				class="space-y-4"
			>
				<input type="hidden" name="id" x-model="experience.ID"/>
        @FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "experienceStartDate", Text: "Start Date"})
					@Datepicker(DatepickerProps{
						ID:         "experienceStartDate",
						Name:       "start_date",
						Value:      experience.StartDate,
						Config:     DatePickerISO,
						Attributes: templ.Attributes{"x-model": "experience.start_date"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "experienceEndDate", Text: "End Date"})
					@Datepicker(DatepickerProps{
						ID:         "experienceEndDate",
						Name:       "end_date",
						Value:      getEndDateValue(experience.EndDate),
						Config:     DatePickerISO,
						Attributes: templ.Attributes{"x-model": "experience.end_date", ":disabled": "experience.is_current"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormItemFlex(FormItemProps{}) {
						@Checkbox(CheckboxProps{
							ID:      "c1",
							Name:    "is_current",
							Value:   "false",
							Checked: false,
							Attributes: templ.Attributes{"x-model": "experience.is_current", "@change": "toggleEndDate"},
						})
						@FormLabel(FormLabelProps{
							For:  "c1",
							Text: "I currently work here",
						})
					}
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "experienceRole", Text: "Role"})
					@Input(InputProps{
						ID:          "experienceRole",
						Name:        "role",
						Placeholder: "Enter role",
						Attributes:  templ.Attributes{"x-model": "experience.role"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "experienceCompany", Text: "Company"})
					@Input(InputProps{
						ID:          "experienceCompany",
						Name:        "company",
						Placeholder: "Enter company name",
						Attributes:  templ.Attributes{"x-model": "experience.company"},
					})
				}
				@FormItem(FormItemProps{Class: "mb-4"}) {
					@FormLabel(FormLabelProps{For: "experienceDescription", Text: "Description"})
					@Textarea(TextareaProps{
						ID:          "experienceDescription",
						Name:        "description",
						Placeholder: "Enter description",
						Attributes:  templ.Attributes{"x-model": "experience.description"},
					})
				}
			</form>
		}
		@ModalFooter() {
			<div class="flex gap-2">
				@ModalClose(modalID) {
					@Button(ButtonProps{Text: "Cancel", Variant: ButtonVariantDefault})
				}
				@Button(ButtonProps{
					Text:       isEdit(isEditing),
					Variant:    ButtonVariantDefault,
					Type:       "submit",
					Attributes: templ.Attributes{"form": formID},
				})
			</div>
		}
	}
}
