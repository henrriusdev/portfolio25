// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/pkg/icons"
	"github.com/axzilla/templui/pkg/utils"
	"time"
)

// DateFormat defines date formatting options
type DateFormat string

const (
	DateFormatISO  DateFormat = "iso"  // ISO format (YYYY-MM-DD)
	DateFormatEU   DateFormat = "eu"   // European format (DD.MM.YYYY)
	DateFormatUK   DateFormat = "uk"   // UK format (DD/MM/YYYY)
	DateFormatUS   DateFormat = "us"   // US format (MM/DD/YYYY)
	DateFormatLONG DateFormat = "long" // Long format (Month DD, YYYY)
)

// dateFormatMapping maps DateFormat to Go time format strings
var dateFormatMapping = map[DateFormat]string{
	DateFormatISO:  "2006-01-02",
	DateFormatEU:   "02.01.2006",
	DateFormatUK:   "02/01/2006",
	DateFormatUS:   "01/02/2006",
	DateFormatLONG: "January 2, 2006",
}

// DateLocale configures locale-specific settings
type DateLocale struct {
	MonthNames []string // Localized month names
	DayNames   []string // Localized day names
}

// DateLocaleDefault and other locale presets
var DateLocaleDefault = DateLocale{
	MonthNames: []string{"January", "February", "March", "April", "May", "June",
		"July", "August", "September", "October", "November", "December"},
	DayNames: []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"},
}

// Pre-defined locales for different languages
var (
	// DateLocaleSpanish provides Spanish localization
	DateLocaleSpanish = DateLocale{
		MonthNames: []string{"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
			"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"},
		DayNames: []string{"Lu", "Ma", "Mi", "Ju", "Vi", "Sa", "Do"},
	}

	// DateLocaleGerman provides German localization
	DateLocaleGerman = DateLocale{
		MonthNames: []string{"Januar", "Februar", "März", "April", "Mai", "Juni",
			"Juli", "August", "September", "Oktober", "November", "Dezember"},
		DayNames: []string{"Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"},
	}

	// DateLocaleFrench provides French localization
	DateLocaleFrench = DateLocale{
		MonthNames: []string{"Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
			"Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"},
		DayNames: []string{"Lu", "Ma", "Me", "Je", "Ve", "Sa", "Di"},
	}

	// DateLocaleItalian provides Italian localization
	DateLocaleItalian = DateLocale{
		MonthNames: []string{"Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno",
			"Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"},
		DayNames: []string{"Lu", "Ma", "Me", "Gi", "Ve", "Sa", "Do"},
	}

	// DateLocaleJapanese provides Japanese localization
	DateLocaleJapanese = DateLocale{
		MonthNames: []string{"1月", "2月", "3月", "4月", "5月", "6月",
			"7月", "8月", "9月", "10月", "11月", "12月"},
		DayNames: []string{"日", "月", "火", "水", "木", "金", "土"},
	}
)

var (
	// DatePickerISO provides ISO format with default locale
	DatePickerISO = DatepickerConfig{
		Format: DateFormatISO,
		Locale: DateLocaleDefault,
	}

	// DatePickerEU provides European format with default locale
	DatePickerEU = DatepickerConfig{
		Format: DateFormatEU,
		Locale: DateLocaleDefault,
	}

	// DatePickerUK provides UK format with default locale
	DatePickerUK = DatepickerConfig{
		Format: DateFormatUK,
		Locale: DateLocaleDefault,
	}

	// DatePickerUS provides US format with default locale
	DatePickerUS = DatepickerConfig{
		Format: DateFormatUS,
		Locale: DateLocaleDefault,
	}

	// DatePickerUS provides US format with default locale
	DatePickerLONG = DatepickerConfig{
		Format: DateFormatLONG,
		Locale: DateLocaleDefault,
	}
)

// NewDatepickerConfig creates a new configuration with specified format and locale
func NewDatepickerConfig(format DateFormat, locale DateLocale) DatepickerConfig {
	return DatepickerConfig{
		Format: format,
		Locale: locale,
	}
}

func (c DatepickerConfig) getGoFormat() string {
	if format, ok := dateFormatMapping[c.Format]; ok {
		return format
	}
	return dateFormatMapping[DateFormatISO] // Default to ISO
}

// DatepickerConfig combines format and locale settings
type DatepickerConfig struct {
	Format DateFormat // Date format style
	Locale DateLocale // Localization settings
}

// DatepickerProps configures the Datepicker component
type DatepickerProps struct {
	ID          string           // DOM identifier
	Name        string           // Form field name
	Value       time.Time        // Selected date
	Config      DatepickerConfig // Format and locale config
	Placeholder string           // Helper text shown when empty
	Disabled    bool             // Prevents interaction
	HasError    bool             // Error state styling
	Class       string           // Additional CSS classes
	Attributes  templ.Attributes // Additional HTML attributes
}

func DatepickerScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		handle := templ.NewOnceHandle()
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script defer nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 149, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">\r\n\t\t\tdocument.addEventListener('alpine:init', () => {\r\n\t\t\t\tAlpine.data('datepicker', () => ({\r\n\t\t\t\t\topen: false,\r\n\t\t\t\t\tvalue: null,\r\n\t\t\t\t\tformat: null,\r\n\t\t\t\t\tcurrentMonth: 5,\r\n\t\t\t\t\tcurrentYear: new Date().getFullYear(),\r\n\t\t\t\t\tmonthDays: [],\r\n\t\t\t\t\tblankDays: [],\r\n\t\t\t\t\tmonths: this.$el?.dataset?.monthnames || ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n\t\t\t\t\tdays: this.$el?.dataset?.daynames || ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\r\n\t\t\t\t\tposition: 'bottom',\r\n\r\n\t\t\t\t\tinit() {\r\n\t\t\t\t\t    const monthNames = JSON.parse(this.$el?.dataset?.monthnames);\r\n    \t\t\t\t\tif (monthNames) {\r\n        \t\t\t\t\tthis.months = monthNames;\r\n   \t\t\t\t\t\t}\r\n\r\n   \t\t\t\t\t\tconst dayNames = JSON.parse(this.$el?.dataset?.daynames);\r\n    \t\t\t\t\tif (dayNames) {\r\n        \t\t\t\t\tthis.days = dayNames;\r\n    \t\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t\t\t\tthis.format = this.$el.dataset.format;\r\n\t\t\t\t\t\tconst initialDate = this.$el?.dataset?.value ? new Date(this.parseDate(this.$el?.dataset?.value)) : new Date();\r\n\t\t\t\t\t\tthis.currentMonth = initialDate.getMonth();\r\n\t\t\t\t\t\tthis.currentYear = initialDate.getFullYear();\r\n\t\t\t\t\t\tthis.calculateDays();\r\n\t\t\t\t\t\t// Format the initial value using the correct locale\r\n\t\t\t\t\t\tif (this.$el.dataset?.value) {\r\n\t\t\t\t\t\t\tthis.value = this.formatDate(initialDate);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttoggleDatePicker() {\r\n\t\t\t\t\t\tthis.open = !this.open;\r\n\t\t\t\t\t\tif (this.open) {\r\n\t\t\t\t\t\t\tthis.$nextTick(() => this.updatePosition());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetCurrentMonth() {\r\n\t\t\t\t\t\treturn this.months[this.currentMonth] + ' ' + this.currentYear;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tcloseDatePicker() {\r\n\t\t\t\t\t\tthis.open = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tupdatePosition() {\r\n\t\t\t\t\t    const inputId = this.$root.dataset.inputId;\r\n    \t\t\t\t\tconst trigger = document.getElementById(inputId);\r\n\t\t\t\t\t\tconst popup = this.$refs.datePickerPopup;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!trigger || !popup) return;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst rect = trigger.getBoundingClientRect();\r\n\t\t\t\t\t\tconst popupRect = popup.getBoundingClientRect();\r\n\t\t\t\t\t\tconst viewportHeight = window.innerHeight;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (rect.bottom + popupRect.height > viewportHeight && rect.top > popupRect.height) {\r\n\t\t\t\t\t\t\tthis.position = 'top';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.position = 'bottom';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tcalculateDays() {\r\n\t\t\t\t\t\tlet firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay();\r\n\t\t\t\t\t\tconst daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfirstDay = firstDay === 0 ? 6 : firstDay - 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.blankDays = Array.from({ length: firstDay }, (_, i) => i);\r\n\t\t\t\t\t\tthis.monthDays = Array.from({ length: daysInMonth }, (_, i) => i + 1);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tatClickPrevMonth() {\r\n\t\t\t\t\t\tthis.currentMonth--;\r\n\t\t\t\t\t\tif (this.currentMonth < 0) {\r\n\t\t\t\t\t\t\tthis.currentMonth = 11;\r\n\t\t\t\t\t\t\tthis.currentYear--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.calculateDays();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tatClickNextMonth() {\r\n\t\t\t\t\t\tthis.currentMonth++;\r\n\t\t\t\t\t\tif (this.currentMonth > 11) {\r\n\t\t\t\t\t\t\tthis.currentMonth = 0;\r\n\t\t\t\t\t\t\tthis.currentYear++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.calculateDays();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tparseDate(dateStr) {\r\n\t\t\t\t\t\tconst parts = dateStr.split(/[-/.]/);\r\n\t\t\t\t\t\tswitch(this.format) {\r\n\t\t\t\t\t\t\tcase 'eu':\r\n\t\t\t\t\t\t\t\treturn `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n\t\t\t\t\t\t\tcase 'us':\r\n\t\t\t\t\t\t\t\treturn `${parts[2]}-${parts[0]}-${parts[1]}`;\r\n\t\t\t\t\t\t\tcase 'uk':\r\n\t\t\t\t\t\t\t\treturn `${parts[2]}-${parts[1]}-${parts[0]}`;\r\n\t\t\t\t\t\t\tcase 'long':\r\n\t\t\t\t\t\t\tcase 'iso':\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn dateStr;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tformatDate(date) {\r\n\t\t\t\t\t\tconst d = date.getDate().toString().padStart(2, '0');\r\n\t\t\t\t\t\tconst m = (date.getMonth() + 1).toString().padStart(2, '0');\r\n\t\t\t\t\t\tconst y = date.getFullYear();\r\n\r\n\t\t\t\t\t\tswitch(this.format) {\r\n\t\t\t\t\t\t\tcase 'eu':\r\n\t\t\t\t\t\t\t\treturn `${d}.${m}.${y}`;\r\n\t\t\t\t\t\t\tcase 'uk':\r\n\t\t\t\t\t\t\t\treturn `${d}/${m}/${y}`;\r\n\t\t\t\t\t\t\tcase 'us':\r\n\t\t\t\t\t\t\t\treturn `${m}/${d}/${y}`;\r\n\t\t\t\t\t\t\tcase 'long':\r\n\t\t\t\t\t\t\t\t// Use the months array from the provided locale\r\n\t\t\t\t\t\t\t\treturn `${this.months[date.getMonth()]} ${d}, ${y}`;\r\n\t\t\t\t\t\t\tcase 'iso':\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn `${y}-${m}-${d}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisToday(day) {\r\n\t\t\t\t\t\tconst today = new Date();\r\n\t\t\t\t\t\tconst date = new Date(this.currentYear, this.currentMonth, day);\r\n\t\t\t\t\t\treturn date.toDateString() === today.toDateString();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisSelected(day) {\r\n\t\t\t\t\t\tif (!this.value) return false;\r\n\t\t\t\t\t\tconst date = new Date(this.currentYear, this.currentMonth, day);\r\n\t\t\t\t\t\tconst selected = new Date(this.parseDate(this.value));\r\n\t\t\t\t\t\treturn date.toDateString() === selected.toDateString();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tselectDate() {\r\n\t\t\t\t\t\tconst day = this.$el.getAttribute('data-day');\r\n\t\t\t\t\t\tconst date = new Date(this.currentYear, this.currentMonth, day);\r\n\t\t\t\t\t\tthis.value = this.formatDate(date);\r\n\t\t\t\t\t\tthis.open = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tactiveDayClass() {\r\n\t\t\t\t\t\tconst day = this.$el.getAttribute('data-day');\r\n\t\t\t\t\t\tif (this.isSelected(day)) {\r\n\t\t\t\t\t\t\treturn 'bg-primary text-primary-foreground';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.isToday(day) && !this.isSelected(day)) {\r\n\t\t\t\t\t\t\treturn 'text-red-500';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 'hover:bg-accent hover:text-accent-foreground';\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tpositionClass() {\r\n\t\t\t\t\t\treturn this.position === 'bottom' ? 'top-full mt-1' : 'bottom-full mb-1';\r\n\t\t\t\t\t},\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Datepicker renders a date selection input with calendar popup
func Datepicker(props DatepickerProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.ID == "" {
			props.ID = utils.RandomID()
		}
		if props.Placeholder == "" {
			props.Placeholder = "Select a date"
		}
		var templ_7745c5c3_Var5 = []any{utils.TwMerge("relative", props.Class)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.Value != (time.Time{}) {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " data-value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(props.Value.Format(time.DateOnly))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 334, Col: 49}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " data-format=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(string(props.Config.Format))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 336, Col: 43}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" data-monthnames=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(props.Config.Locale.MonthNames))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 337, Col: 68}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\" data-daynames=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(props.Config.Locale.DayNames))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 338, Col: 64}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" x-data=\"datepicker\" data-input-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(props.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 340, Col: 26}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" @resize.window=\"updatePosition\"><div class=\"relative\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Input(InputProps{
			ID:          props.ID,
			Name:        props.Name,
			Value:       props.Value.Format(time.DateOnly),
			Placeholder: props.Placeholder,
			Disabled:    props.Disabled,
			Class:       utils.TwMerge(props.Class, "peer"),
			HasError:    props.HasError,
			Type:        "text",
			Readonly:    true,
			Attributes: utils.MergeAttributes(
				templ.Attributes{
					"x-ref":        "datePickerInput",
					":x-modelable": "value",
					":value":       "value",
					"@click":       "toggleDatePicker",
				},
				props.Attributes,
			),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 = []any{
			utils.TwMerge(
				// Layout
				"absolute top-0 right-0 px-3 py-2",
				// Styling
				"cursor-pointer text-muted-foreground",
				// States
				"hover:text-foreground",
				"peer-disabled:pointer-events-none peer-disabled:opacity-50",
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var12...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<button type=\"button\" @click=\"toggleDatePicker\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.Disabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var12).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.Calendar(icons.IconProps{}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</button></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 = []any{
			utils.TwMerge(
				// Layout
				"absolute left-0 z-50 w-64 p-4",
				// Styling
				"rounded-lg border bg-popover shadow-md",
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var14...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<div x-show=\"open\" x-ref=\"datePickerPopup\" @click.away=\"closeDatePicker\" x-transition.opacity class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var14).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/components/datepicker.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" x-bind:class=\"positionClass\"><div class=\"flex items-center justify-between mb-4\"><span x-text=\"getCurrentMonth\" class=\"text-sm font-medium\"></span><div class=\"flex gap-1\"><button type=\"button\" @click=\"atClickPrevMonth\" class=\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-7 w-7\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.ChevronLeft(icons.IconProps{}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</button> <button type=\"button\" @click=\"atClickNextMonth\" class=\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-7 w-7\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.ChevronRight(icons.IconProps{}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</button></div></div><div class=\"grid grid-cols-7 gap-1 mb-2\"><template x-for=\"day in days\" :key=\"day\"><div class=\"text-center text-xs text-muted-foreground\" x-text=\"day\"></div></template></div><div class=\"grid grid-cols-7 gap-1\"><template x-for=\"blank in blankDays\" key=\"&#39;blank&#39; + blank\"><div class=\"h-8 w-8\"></div></template><template x-for=\"day in monthDays\"><button x-bind:data-day=\"day\" type=\"button\" @click=\"selectDate\" :class=\"activeDayClass\" x-text=\"day\" class=\"inline-flex h-8 w-8 items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"></button></template></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
