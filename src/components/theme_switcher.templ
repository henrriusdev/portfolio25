package components

import (
	"github.com/henrriusdev/portfolio/src/components/button"
	"github.com/henrriusdev/portfolio/src/components/icon"
)

templ themeSwitcherHandler() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			// Función para actualizar los iconos según el tema actual
			function updateThemeIcons() {
				const darkIcon = document.getElementById('darkThemeIcon');
				const lightIcon = document.getElementById('lightThemeIcon');
				
				if (!darkIcon || !lightIcon) return; // Salir si los iconos no existen
				
				const isDarkMode = document.documentElement.classList.contains('dark');
				
				// Mostrar el icono correcto según el tema actual
				darkIcon.style.display = isDarkMode ? 'none' : 'block';
				lightIcon.style.display = isDarkMode ? 'block' : 'none';
			}
			
			// Función para manejar el cambio de tema
			function handleThemeToggle() {
				// Usar la función global toggleTheme definida en base.templ
				if (window.toggleTheme) {
					window.toggleTheme();
				}
				
				// Actualizar los iconos después de un pequeño retraso para permitir que el tema cambie
				setTimeout(updateThemeIcons, 10);
				
				// Añadir animación
				const isDarkMode = document.documentElement.classList.contains('dark');
				const darkIcon = document.getElementById('darkThemeIcon');
				const lightIcon = document.getElementById('lightThemeIcon');
				const visibleIcon = isDarkMode ? lightIcon : darkIcon;
				
				if (visibleIcon) {
					visibleIcon.classList.add('animate-spin');
					setTimeout(() => {
						visibleIcon.classList.remove('animate-spin');
					}, 500);
				}
			}
			
			// Configurar los iconos cuando se carga la página
			document.addEventListener('DOMContentLoaded', updateThemeIcons);
			
			// También actualizar inmediatamente para evitar parpadeos
			updateThemeIcons();
			
			// Exponer la función para el botón
			window.handleThemeToggle = handleThemeToggle;
		</script>
	}
}

type ThemeSwitcherProps struct {
	Class string
}

templ ThemeSwitcher(props ThemeSwitcherProps) {
	@themeSwitcherHandler()
	@button.Button(button.Props{
		Size:    button.SizeIcon,
		Variant: button.VariantGhost,
		Class:   props.Class,
		Attributes: templ.Attributes{
			"onclick": "handleThemeToggle()",
		},
	}) {
		@DynamicThemeIcon()
	}
}

templ DynamicThemeIcon() {
	<div>
		<span 
			id="lightThemeIcon"
			class="block transition-all duration-300" 
		>
			@LightIcon()
		</span>
		<span 
			id="darkThemeIcon"
			class="block transition-all duration-300" 
		>
			@DarkIcon()
		</span>
	</div>
}

templ DarkIcon() {
	@icon.Moon(icon.Props{})
}

templ LightIcon() {
	@icon.SunMedium(icon.Props{})
}
