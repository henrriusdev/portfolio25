package components

import (
	"github.com/axzilla/templui/pkg/icons"
	"github.com/axzilla/templui/pkg/utils"
)

// Props for the Select component
type SelectProps struct {
	ID            string           // DOM identifier
	Name          string           // Form field name
	Placeholder   string           // Helper text shown when empty
	Options       []SelectOption   // Available choices
	Disabled      bool             // Prevents interaction
	Required      bool             // Required
	HasError      bool             // Error state styling
	Class         string           // Additional CSS classes
	DropdownClass string           // Additional dropdown styling
	Multiple      bool             // Allow multiple selections
	Attributes    templ.Attributes // Additional HTML attributes
}

// Represents a selectable option
type SelectOption struct {
	Label      string           `json:"label"`      // Display text
	Value      string           `json:"value"`      // Form value
	Selected   bool             `json:"selected"`   // Default selection
	Attributes templ.Attributes `json:"attributes"` // Additional HTML attributes
}

// Alpine component script (ensures it's included only once)
var multiSelectHandle = templ.NewOnceHandle()

func parseTemplJsonString(data interface{}) string {
	b, err := templ.JSONString(data)
	if err != nil {
		return ""
	}
	return b
}

templ MultiSelectScript() {
	@multiSelectHandle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener("alpine:init", () => {
				Alpine.data("multiSelectComponent", (options = [], selectedItems = []) => ({
					options: options,
					selected: selectedItems,
					open: false,
					toggleDropdown() { 
						this.open = !this.open;
						console.log("Dropdown state:", this.open);
					},
					select(option) {
						let index = this.selected.findIndex(item => item.value === option.value);
						if (index === -1) {
							this.selected.push(option);
						} else {
							this.selected.splice(index, 1); // Unselect if already selected
						}
					},
					remove(option) {
						this.selected = this.selected.filter(item => item.value !== option.value);
					},
					isSelected(option) {
						return this.selected.some(item => item.value === option.value);
					}
				}));
			});
		</script>
	}
}

// Select component
templ Select(props SelectProps) {
	if props.Multiple {
		<div
			class={ utils.TwMerge("relative w-full", props.Class) }
			x-data={ `multiSelectComponent(` + parseTemplJsonString(props.Options) + `, [])` }
		>
			<!-- Selected items rendered as tags -->
			<div
				class="border rounded-md bg-background p-2 flex flex-wrap gap-2 cursor-pointer"
				x-on:click="toggleDropdown()"
			>
				<template x-for="(item, index) in selected" :key="item.value">
					<span class="bg-blue-100 text-blue-700 px-2 py-1 rounded flex items-center">
						<span x-text="item.label"></span>
						<button type="button" class="ml-1 text-xs" x-on:click.stop="remove(item)">x</button>
					</span>
				</template>
				<input type="text" readonly placeholder={ props.Placeholder } class="flex-1 outline-none bg-transparent"/>
			</div>

			<!-- Dropdown list with checkmarks -->
			<div 
				x-show="open" 
				x-transition 
				class={ utils.TwMerge("absolute !z-[5000] top-full mt-1 w-full bg-gray-100 dark:bg-gray-800 border rounded shadow-lg max-h-60 overflow-auto", props.DropdownClass) }
			>
				<template x-for="option in options" :key="option.value">
					<div 
						x-on:click="select(option)" 
						class="p-2 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 dark:text-gray-100 flex justify-between items-center"
					>
						<span x-text="option.label"></span>
						<!-- Checkmark -->
						<span x-show="isSelected(option)">@icons.Check(icons.IconProps{Size: "8"})</span>
					</div>
				</template>
			</div>

			<!-- Hidden inputs for each selected value -->
			<template x-for="item in selected" :key="item.value">
				<input type="hidden" name={ props.Name } :value="item.value"/>
			</template>
		</div>
	} else {
		<div class={ utils.TwMerge("relative w-full", props.Class) }>
			<select
				x-ref={ props.ID }
				id={ props.ID }
				name={ props.Name }
				disabled?={ props.Disabled }
				required?={ props.Required }
				multiple?={ props.Multiple }
				class={ utils.TwMerge(
                    "peer h-10 w-full px-3 py-2",
                    "rounded-md border border-input bg-background text-sm",
                    "appearance-none ring-offset-background",
                    "placeholder:text-muted-foreground",
                    "focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2",
                    "disabled:cursor-not-allowed disabled:opacity-50",
                    utils.TwIf("border-destructive ring-destructive", props.HasError),
                ) }
				{ props.Attributes... }
			>
				if props.Placeholder != "" {
					<option value="" disabled selected hidden>{ props.Placeholder }</option>
				}
				for _, option := range props.Options {
					<option value={ option.Value } selected?={ option.Selected } { option.Attributes... }>
						{ option.Label }
					</option>
				}
			</select>
			<div class="absolute right-3 top-3 pointer-events-none peer-disabled:opacity-50">
				@icons.ChevronDown(icons.IconProps{
					Size:  "16",
					Class: "text-muted-foreground",
				})
			</div>
		</div>
	}
}
