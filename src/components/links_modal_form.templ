package components

import (
    "github.com/henrriusdev/portfolio/pkg/model"
    "strconv"
)

var contactFormHandle = templ.NewOnceHandle()

templ ContactFormScript() {
    @contactFormHandle.Once() {
        <script nonce={ templ.GetNonce(ctx) }>
            document.addEventListener("alpine:init", () => {
                Alpine.data("contactFormData", (initialContact = null) => {
                    return {
                        contact: initialContact || {
                            // Using gorm.Model.ID for edit creation (empty when creating new)
                            ID: "",
                            platform: "",
                            url: "",
                            icon: ""
                        },

                        formAction() {
                            return "/dashboard/save-link";
                        },

                        setContact(data) {
                            this.contact = data;
                        }
                    }
                });
            });
        </script>
    }
}

templ ContactModal(modalID string, contact model.Contact) {
    {{
        isEditing := contact.ID != 0
        formID := "contactForm"
        if isEditing {
            formID = "contactFormEdit-" + strconv.Itoa(int(contact.ID))
        }
        // Prepare JSON Data
        contactDataJSON := parseTemplJsonString(contact)
    }}
    <!-- Modal Component -->
    @Modal(ModalProps{ID: modalID, Class: "max-w-lg mx-auto"}) {
        @ModalHeader() {
            <h3 class="text-xl font-bold">
                if isEditing {
                    "Edit Link"
                } else {
                    "Create Link"
                }
            </h3>
        }
        @ModalBody() {
            <form
                id={formID}
                x-data={ `contactFormData(` + contactDataJSON + `)` }
                x-bind:action="formAction()"
                method="POST"
                class="space-y-4"
            >
                <input type="hidden" name="ID" x-model="contact.ID"/>
                @FormItem(FormItemProps{Class: "mb-4"}) {
                    @FormLabel(FormLabelProps{For: "contactPlatform", Text: "Platform"})
                    @Input(InputProps{
                        ID:          "contactPlatform",
                        Name:        "platform",
                        Placeholder: "e.g. Instagram",
                        Attributes:  templ.Attributes{"x-model": "contact.platform"},
                    })
                }
                @FormItem(FormItemProps{Class: "mb-4"}) {
                    @FormLabel(FormLabelProps{For: "contactUrl", Text: "Url"})
                    @Input(InputProps{
                        ID:          "contactUrl",
                        Name:        "url",
                        Placeholder: "https://instagram.com/yourhandle",
                        Attributes:  templ.Attributes{"x-model": "contact.url"},
                    })
                }
            </form>
        }
        @ModalFooter() {
            <div class="flex gap-2">
                @ModalClose(modalID) {
                    @Button(ButtonProps{Text: "Cancel", Variant: ButtonVariantDefault})
                }
                @Button(ButtonProps{
                    Text:       isEdit(isEditing),
                    Variant:    ButtonVariantDefault,
                    Type:       "submit",
                    Attributes: templ.Attributes{"form": formID},
                })
            </div>
        }
    }
}