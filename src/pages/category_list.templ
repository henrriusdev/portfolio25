package pages

import (
	"strconv"

	"github.com/henrriusdev/portfolio/pkg/model"
	"github.com/henrriusdev/portfolio/src/components/button"
	"github.com/henrriusdev/portfolio/src/components/modal"
	"github.com/henrriusdev/portfolio/src/layout"
)

templ CategoryList(categories []model.Category) {
	@layout.BaseInternal("Categories") {
		<div class="container mx-auto py-12">
			<div class="max-w-4xl mx-auto">
				<div class="flex justify-between items-center mb-8">
					<h1 class="text-4xl font-bold">Categories</h1>
					@modal.Trigger(modal.TriggerProps{ModalID: "newCategoryModal"}) {
						@button.Button(button.Props{Variant: button.VariantDefault}) {
							New Category
						}
					}
				</div>
				if len(categories) > 0 {
					<div class="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
						<table class="min-w-full">
							<thead class="bg-gray-100 dark:bg-gray-700">
								<tr>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Description</th>
									<th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
								</tr>
							</thead>
							<tbody class="divide-y divide-gray-200 dark:divide-gray-700">
								for _, category := range categories {
									<tr>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
											<a href={ templ.SafeURL("/categories/" + strconv.Itoa(int(category.ID))) } class="text-blue-600 dark:text-blue-400 hover:underline">
												{ category.Name }
											</a>
										</td>
										<td class="px-6 py-4">
											<div class="text-sm text-gray-500 dark:text-gray-400">{ category.Description }</div>
										</td>
										<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
											@modal.Trigger(modal.TriggerProps{ModalID: "deleteCategoryModal-" + strconv.Itoa(int(category.ID))}) {
												@button.Button(button.Props{Variant: button.VariantDestructive}) {
													Delete
												}
											}
										</td>
									</tr>
									@modal.Modal(modal.Props{ID: "deleteCategoryModal-" + strconv.Itoa(int(category.ID)),Class: "max-w-md"}) {
										@modal.Header() {
											Delete Category
										}
										@modal.Body() {
											<p class="mb-4">Are you sure you want to delete the category "{ category.Name }"? This action cannot be undone.</p>
										}
										@modal.Footer() {
											<form action="/categories/delete" method="post">
												<input type="hidden" name="id" value={ strconv.Itoa(int(category.ID)) }/>
												@button.Button(button.Props{Variant: button.VariantDestructive, Type: button.TypeSubmit}) {
													Delete
												}
											</form>
										}
									}
								}
							</tbody>
						</table>
					</div>
				} else {
					<div class="text-center py-8">
						<p class="text-gray-500 dark:text-gray-400">No categories found. Create one to get started.</p>
					</div>
				}
            
			</div>
		</div>
		@modal.Modal(modal.Props{ID: "newCategoryModal",Class: "max-w-md"}) {
			@modal.Header(){
				New Category
			}
			@modal.Body(){
				<form action="/categories" method="post" class="space-y-4">
					<div>
						<label for="name" class="block text-sm font-medium mb-1">Name</label>
						<input 
							type="text" 
							id="name" 
							name="name" 
							required
							class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
						/>
					</div>
					<div>
						<label for="description" class="block text-sm font-medium mb-1">Description</label>
						<textarea 
							id="description" 
							name="description" 
							rows="3"
							class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
						></textarea>
					</div>
					<div class="flex justify-end">
						@button.Button(button.Props{Variant: button.VariantDefault, Type: button.TypeSubmit}) {
							Create
						}
					</div>
				</form>
			}
		}
	}
}

func IsCategorySelected(categories []model.Category, categoryID uint) bool {
	for _, category := range categories {
		if category.ID == categoryID {
			return true
		}
	}
	return false
}