package pages

import (
	"github.com/henrriusdev/portfolio/pkg/model"
	"github.com/henrriusdev/portfolio/pkg/common"
	"github.com/henrriusdev/portfolio/src/components/button"
	"github.com/henrriusdev/portfolio/src/components/modal"
	"github.com/henrriusdev/portfolio/src/layout"
	"strconv"
)

templ BlogDashboard(posts []model.BlogPost) {
	@layout.BaseInternal("Blog Dashboard") {
		<div class="container mx-auto py-8">
			<div class="max-w-4xl mx-auto">
				<div class="flex justify-between items-center mb-8">
					<h1 class="text-3xl font-bold">Blog Dashboard</h1>
					<a href="/blog/new" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">New Post</a>
				</div>
				
				<!-- Search form -->
				<div class="mb-8">
					<form action="/blog/search" method="get" class="flex items-center">
						<div class="relative w-full max-w-lg">
							<input 
								type="text" 
								name="q" 
								placeholder="Search posts..." 
								class="w-full px-4 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
							/>
							<button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2">
								<svg class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
								</svg>
							</button>
						</div>
					</form>
				</div>
				<div class="space-y-6">
					for _, post := range posts {
						<article class="border p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
							<div class="flex justify-between items-start">
								<div>
									<h2 class="text-2xl font-bold mb-2">
										<a href={ templ.SafeURL("/blog/" + strconv.Itoa(int(post.ID))) } class="hover:text-blue-500">
											{ post.Title }
										</a>
									</h2>
									<p class="text-gray-600 mb-4">
										if len(post.Content) > 200 {
											{ common.StripMarkdown(post.Content[:200]) + "..." }
										} else {
											{ common.StripMarkdown(post.Content) }
										}
									</p>
									<div class="text-sm text-gray-500">
										{ post.CreatedAt.Format("2006-01-02") }
									</div>
								</div>
								<div class="flex items-center space-x-2">
									<a
										href={ templ.SafeURL("/blog/" + strconv.Itoa(int(post.ID)) + "/edit") }
										class="text-blue-500 hover:text-blue-600"
									>
										Edit
									</a>
									@modal.Trigger(modal.TriggerProps{ModalID: "deleteModal-" + strconv.Itoa(int(post.ID))}) {
										@button.Button(button.Props{Variant: button.VariantDestructive}) {
											Delete
										}
									}
								</div>
							</div>
						</article>
						@modal.Modal(modal.Props{ID: "deleteModal-" + strconv.Itoa(int(post.ID))}) {
							@modal.Header() {
								Confirm Deletion
							}
							@modal.Body() {
								Are you sure you want to delete this post? This action cannot be undone.
							}
							@modal.Footer() {
								<form action="/blog/delete" method="post">
									<input type="hidden" name="id" value={ strconv.Itoa(int(post.ID)) }/>
									@button.Button(button.Props{Variant: button.VariantDestructive, Type: button.TypeSubmit}) {
										Delete
									}
								</form>
							}
						}
					}
				</div>
			</div>
		</div>
	}
}
