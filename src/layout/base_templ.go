// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package layout

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/henrriusdev/portfolio/src/components"

func ThemeSwitcherScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		handle := templ.NewOnceHandle()
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/layout/base.templ`, Line: 8, Col: 37}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">\n\t\t\t// Initial theme setup\n\t\t\tfunction setupTheme() {\n\t\t\t\t// Verificar el tema guardado en localStorage o usar preferencia del sistema\n\t\t\t\tlet isDarkMode;\n\t\t\t\tconst storedTheme = localStorage.getItem('appTheme');\n\t\t\t\t\n\t\t\t\t// Asegurar que no haya estilos inline en <body> (p. ej., de extensiones)\n\t\t\t\tstripBodyInlineStyles();\n\t\t\t\tstartBodyStyleGuard();\n\t\t\t\t\n\t\t\t\tif (storedTheme) {\n\t\t\t\t\t// Usar preferencia guardada\n\t\t\t\t\tisDarkMode = storedTheme === 'dark';\n\t\t\t\t} else {\n\t\t\t\t\t// Usar preferencia del sistema\n\t\t\t\t\tisDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\t\t\t\t\t// Guardar la preferencia del sistema\n\t\t\t\t\tlocalStorage.setItem('appTheme', isDarkMode ? 'dark' : 'light');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Aplicar el tema inicial\n\t\t\t\tapplyTheme(isDarkMode);\n\t\t\t}\n\t\t\t\n\t\t\t// Elimina el atributo style del body si est√° presente\n\t\t\tfunction stripBodyInlineStyles() {\n\t\t\t\tif (document.body && document.body.hasAttribute('style')) {\n\t\t\t\t\tdocument.body.removeAttribute('style');\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Observa y elimina futuros cambios al atributo style del body\n\t\t\tfunction startBodyStyleGuard() {\n\t\t\t\tif (window.__stripBodyStyleObserver || !('MutationObserver' in window)) return;\n\t\t\t\tconst obs = new MutationObserver(() => stripBodyInlineStyles());\n\t\t\t\tif (document.body) {\n\t\t\t\t\tobs.observe(document.body, { attributes: true, attributeFilter: ['style'] });\n\t\t\t\t\twindow.__stripBodyStyleObserver = obs;\n\t\t\t\t} else {\n\t\t\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\t\t\tif (!window.__stripBodyStyleObserver && document.body) {\n\t\t\t\t\t\t\tobs.observe(document.body, { attributes: true, attributeFilter: ['style'] });\n\t\t\t\t\t\t\twindow.__stripBodyStyleObserver = obs;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Funci√≥n para aplicar el tema\n\t\t\tfunction applyTheme(isDarkMode) {\n\t\t\t\t// Aplicar clase al html\n\t\t\t\tdocument.documentElement.classList.toggle('dark', isDarkMode);\n\t\t\t}\n\t\t\t\n\t\t\t// Funci√≥n global para cambiar el tema\n\t\t\twindow.toggleTheme = function() {\n\t\t\t\tconst isDarkMode = document.documentElement.classList.contains('dark');\n\t\t\t\tconst newMode = !isDarkMode;\n\t\t\t\t\n\t\t\t\t// Guardar preferencia\n\t\t\t\tlocalStorage.setItem('appTheme', newMode ? 'dark' : 'light');\n\t\t\t\t\n\t\t\t\t// Aplicar cambio\n\t\t\t\tapplyTheme(newMode);\n\t\t\t};\n\t\t\t\n\t\t\t// Configurar el tema cuando se carga la p√°gina\n\t\t\tdocument.addEventListener('DOMContentLoaded', setupTheme);\n\t\t\t\n\t\t\t// Tambi√©n ejecutar inmediatamente para evitar parpadeos\n\t\t\tsetupTheme();\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Base(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!doctype html><html lang=\"en\" class=\"h-full transition-colors duration-300\"><head><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/layout/base.templ`, Line: 88, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " | HenrriusDev üë®üèª\u200düíª</title><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><!-- Tailwind CSS (output) --><link href=\"/static/app.css\" rel=\"stylesheet\"><!-- Animations CSS --><link href=\"/static/animations.css\" rel=\"stylesheet\"><!-- Ya no usamos Alpine.js --><!-- Theme switcher script -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ThemeSwitcherScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</head><body class=\"transition-colors duration-300 bg-white dark:bg-gray-900 text-gray-900 dark:text-white min-h-screen\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Navbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var4.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
